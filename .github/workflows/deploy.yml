name: üöÄ Build and Deploy Docker Image

on:
  push:
    branches: [main]

permissions:
  contents: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/think-nlp-app

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set image tag based on date
      run: echo "IMAGE_TAG=$(date +%Y-%m-%d)" >> $GITHUB_ENV

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

    - name: Build and tag Docker image
      run: |
        docker build -t $IMAGE_NAME:latest \
                     -t $IMAGE_NAME:${{ env.IMAGE_TAG }} .

    - name: Push both tags
      run: |
        docker push $IMAGE_NAME:latest
        docker push $IMAGE_NAME:${{ env.IMAGE_TAG }}

    - name: Conditionally tag the commit
      run: |
        if git ls-remote --tags origin | grep -q "refs/tags/image-${{ env.IMAGE_TAG }}"; then
          echo "‚úÖ Tag already exists. Skipping tag push."
        else
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git tag -a image-${{ env.IMAGE_TAG }} -m "Image built on ${{ env.IMAGE_TAG }}"
          git push origin image-${{ env.IMAGE_TAG }}
        fi

    - name: Create GitHub release (optional)
      uses: softprops/action-gh-release@v1
      with:
        tag_name: image-${{ env.IMAGE_TAG }}
        name: üöÄ Image ${{ env.IMAGE_TAG }}
        body: |
          Automated Docker image release for tag `${{ env.IMAGE_TAG }}`
          Built from commit `${{ github.sha }}`.
        draft: false
        prerelease: false

    - name: Rebuild .env.production from secrets
      run: |
        cat <<EOF > .env.production
        ENV=${{ secrets.ENV }}
        SERVICE_NAME=${{ secrets.SERVICE_NAME }}
        DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
        DROPLET_USER=${{ secrets.DROPLET_USER }}
        DROPLET_HOST=${{ secrets.DROPLET_HOST }}

        POSTGRES_USER=${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
        POSTGRES_DB=${{ secrets.POSTGRES_DB }}
        POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
        POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}

        AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION=${{ secrets.AWS_REGION }}
        AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }}

        PGADMIN_DEFAULT_EMAIL=${{ secrets.PGADMIN_DEFAULT_EMAIL }}
        PGADMIN_DEFAULT_PASSWORD=${{ secrets.PGADMIN_DEFAULT_PASSWORD }}

        MAX_SIZE_FILE_UPLOAD=${{ secrets.MAX_SIZE_FILE_UPLOAD }}
        EOF


    - name: Copy docker-compose, Makefile, and env file to Droplet
      env:
        SSH_PRIVATE_KEY: ${{ secrets.DROPLET_SSH_PRIVATE_KEY }}
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.DROPLET_HOST }} >> ~/.ssh/known_hosts
        scp docker-compose.production.yml Makefile .env.production ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_HOST }}:/root/

    - name: Notify Telegram on success
      if: success()
      run: |
        curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
        -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
        -d text="‚úÖ *Deploy succeeded*: Image \\`${{ env.IMAGE_TAG }}\\` is live." \
        -d parse_mode=Markdown

    - name: Notify Telegram on failure
      if: failure()
      run: |
        curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
        -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
        -d text="‚ùå *Deploy failed* on commit \\`${{ github.sha }}\\`." \
        -d parse_mode=Markdown
