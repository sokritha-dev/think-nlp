# .github/workflows/deploy.yml
name: üöÄ Build and Deploy to DigitalOcean Kubernetes

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/think-nlp-app

    steps:
      - name: ‚úÖ Checkout code
        uses: actions/checkout@v4

      - name: ‚è∞ Set image tag based on date
        run: echo "IMAGE_TAG=$(date +%Y-%m-%d)" >> $GITHUB_ENV

      - name: üîê Docker login
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: üìÜ Build and push Docker image
        run: |
          docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:${{ env.IMAGE_TAG }} .
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:${{ env.IMAGE_TAG }}

      - name: üåê Install doctl and authenticate
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: üîú Setup kubeconfig from DOKS
        run: doctl kubernetes cluster kubeconfig save ${{ secrets.K8S_CLUSTER }}

      - name: üîê Create Supabase Secrets in Kubernetes
        env:
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: |
          kubectl create secret generic supabase-secret \
            --from-literal=POSTGRES_HOST=$POSTGRES_HOST \
            --from-literal=POSTGRES_DB=$POSTGRES_DB \
            --from-literal=POSTGRES_USER=$POSTGRES_USER \
            --from-literal=POSTGRES_PASSWORD=$POSTGRES_PASSWORD \
            --dry-run=client -o yaml | kubectl apply -f -


      - name: üîê Create App Secrets in Kubernetes
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
          FRONTEND_ORIGIN: ${{ secrets.FRONTEND_ORIGIN }}
        run: |
          kubectl create secret generic app-secret \
            --from-literal=AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
            --from-literal=AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
            --from-literal=AWS_REGION=$AWS_REGION \
            --from-literal=AWS_S3_BUCKET_NAME=$AWS_S3_BUCKET_NAME \
            --from-literal=FRONTEND_ORIGIN=$FRONTEND_ORIGIN \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: üì• Install cert-manager if needed
        run: |
          kubectl get ns cert-manager || kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.14.4/cert-manager.yaml

      - name: üîç Dry-run manifest validation
        run: kubectl apply --dry-run=client -f k8s/

      - name: üöÄ Apply manifests
        run: |
          kubectl apply -f k8s/app-deployment.yaml
          kubectl apply -f k8s/app-service.yaml
          kubectl apply -f k8s/cluster-issuer.yaml
          kubectl apply -f k8s/app-ingress.yaml

      - name: üìÖ Set deployment image explicitly
        run: |
          kubectl set image deployment/nlp-app nlp-app=$IMAGE_NAME:${{ env.IMAGE_TAG }}

      - name: üîñ GitHub Tag if needed
        run: |
          if git ls-remote --tags origin | grep -q "refs/tags/image-${{ env.IMAGE_TAG }}"; then
            echo "‚úÖ Tag already exists. Skipping."
          else
            git config --global user.name "github-actions"
            git config --global user.email "actions@github.com"
            git tag -a image-${{ env.IMAGE_TAG }} -m "Image built on ${{ env.IMAGE_TAG }}"
            git push origin image-${{ env.IMAGE_TAG }}
          fi

      - name: üì¶ GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: image-${{ env.IMAGE_TAG }}
          name: üöÄ Image ${{ env.IMAGE_TAG }}
          body: |
            Automated Docker image release for tag `${{ env.IMAGE_TAG }}`
            Built from commit `${{ github.sha }}`.
          draft: false
          prerelease: false

      - name: üì¢ Telegram Notify (Success)
        if: success()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="‚úÖ *Deploy succeeded*: Image \`${{ env.IMAGE_TAG }}\` is live." \
            -d parse_mode=Markdown

      - name: ‚ùå Telegram Notify (Failure)
        if: failure()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="‚ùå *Deploy failed* on commit \`${{ github.sha }}\`." \
            -d parse_mode=Markdown
